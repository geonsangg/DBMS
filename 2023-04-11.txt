INSERT - insert into 테이블명(컬럼명,컬럼명,....) values(값,값,....);  //레코드 생성
 테이블 만든 순서 
 dept_copy - DNO, DNAME, LOC
 단, 테이블 만든 컬럼 순서대로 모든 컬럼에 값을 넣을 거라면 컬럼명은 생략가능
  예) insert into dept_copy values(10,'ACCOUNTING','NEW YORK');
     insert into dept_copy (dno, loc, dname) values (20, 'DALLAS', 'RESEARCH');
 컬럼, 값을 넣지 않으면 NULL 값으로 넣을 수 있다.
  예) insert into dept_copy (dno,dname) values(30,'SALES');  = loc 값은 null
     insert into dept_copy values(40,'OPERATIONS',NULL);  = 처럼 값을 null로 넣어도 가능하다.
     insert into dept_copy values(50, 'COMPUTING','');  = 혹은 ‘’로 줘도 가능하다. 단. ‘’ 사이의 공백이 있
으면 공백이라는 문자가 들어가서 ‘’ 사이를 띄어쓰면 절대 안된다.
 날짜를 넣을땐 오라클 기본 값은 ‘YYYY/MM/DD' 이다
  예) insert into emp_copy values (8000,'홍길동','MANAGER','2023/04/08',10);
 그러나 날짜를 ‘2023.04.08.’ , ‘2023-04-08’, ‘2023,04,08’처럼 입력하면 옛날 버전은 오류가 뜬다. 따라서 정확
하게 TO_DATE('2023.04.08.','YYYY.MM.DD')처럼 문자를 날짜 형태로 바꿔주는게 정석이다. 
혹은 날짜에 sysdate를 넣어 오늘 날짜를 넣을 수 있다.
  예) insert into emp_copy values (8400,'이동국','SALESMAN',sysdate,20);
서브쿼리를 이용해서 데이터를 복사할 수 있다.
  예) insert into dept_copy select * from department; = department테이블의 데이터를 모두 복사해서 가져옴
UPDATE(레코드의 컬럼데이터 수정) -를 할 경우 반드시 백업본을 만들어 놓고 해야한다. 
  update 테이블명 set 수정할컬럼 = 수정값, 수정할컬럼 = 수정값.... where 조건; (where 필수)
   //  where을 주지 않으면 컬럼의 값이 모두 바뀌기 때문에 꼭 변경할 값을 찾는 where를 줘야한다 
   예) update dept_copy set dname = 'PROGRAMMING' where dno = 10; = 10번부서의 부서이름 변경
      update dept_copy set dname = 'ACCOUNTING', loc = 'SEOUL' where dno = 10;   =  10번부서의 부서
명과 지역을 변경
 혹은 수정값에 서브쿼리가 올 수 있다.
  예) update dept_copy set loc = (select loc from dept_copy where dno = 20) where dno = 10; =  10번 부
서의 지역을 20번 부서의 지역과 같은 지역으로 변경
서브쿼리가 여러개 올 수도 있다.
  예) update dept_copy set dname = (select dname from dept_copy where dno = 30), loc = (select loc from 
dept_copy where dno = 30) where dno = 10;  =  10번 부서의 부서명을 30번 부서의 부서명으로 변경하고, 
지역을 30번 부서의 지역으로 변경
DELETE (레코드삭제)- delete from 테이블명 where 조건; (where 필수)               // from 생략가능
  // where을 주지 않으면 모든 레코드가 전부 삭제되기 때문에 삭제할 레코드를 찾는 where 조건을 반드시 
줘야한다.
  예) delete dept_copy where dno = 10;   = 부서명이 10번인 레코드 삭제
 서브쿼리도 사용 가능
  예) delete emp_copy where dno = (select dno from department where dname = 'SALES');  = 
     department의 부서명에서 sales의 부서명과 같은 emp_copy의 부서명의 레코드를 삭제

무결성 제약조건 : 테이블에 유요하지 않은 데이터가 입력되는 것을 방지하기 위해 만들어 놓은 규칙
  모든 제약조건은 제약조건에 이름을 줄 수 있다. 제약조건의 이름을 주지않으면 랜덤으로 생성된다.
   예) id varchar2(20) constraint(제약을 주겠다.) id_uk(제약조건이름) unique(제약조건) 
  제약조건에 위배된다면 무결성 제약조건에 위배됩니다(제약조건이름)으로 표시된다.
 1. NOT NULL : null 값을 포함하지 못하도록 지정
  예) create table customer (id varchar2(20) not null, pwd varchar2(20) not null, name varchar2(20) not null, 
phone varchar2(30), address varchar2(100));  = id, pwd, name은 null 값을 가질 수 없다. 
 2. UNIQUE : 유일한 값을 갖도록 지정 (null 값은 가질 수 있음)
  예) create table customer (id varchar2(20) unique, pwd varchar2(20) not null, name varchar2(20) not null, 
phone varchar2(30), address varchar2(100));  = id는 중복 될 수 없고 pwd,name은 null 값을 가질 수 없다.
 3. PRIMARY KEY(기본키, 유일키) : not null 과 unique를 결합한 형태 (유일한 값 + null일 수 없음)
  예) create table customer (id varchar2(20) primary key, pwd varchar2(20) not null, name varchar2(20) not 
null, phone varchar2(30), address varchar2(100)); = id는 중복도 안되고 id,pwd,name- null 값을 가질 수 없다.
  혹은 create table customer (id varchar2(20), pwd varchar2(20) not null, name varchar2(20) not null, phone 
varchar2(30), address varchar2(100), constraint id_pk primary key(id)); 처럼 뒤에 줘도 가능하다. 
                constaint 제약조건이름 primary key(컬럼명)
 4. FOREIGN KEY(외래키) : 참조되는 테이블(부모 테이블)에 존재하는 컬럼의 값으로만 허용
 5. CHECK : 값의 범위나 조건을 지정하여 설정된 값만을 허용 
데이터 사전으로 제약조건도 볼 수 있다.
  예) select table_name, constraint_name from user_constraints where table_name in('CUSTOMER');
  테이블이름, 제약조건이름을 보겠다. 유저가만든 제약조건들을 , 테이블이름이 customer인
