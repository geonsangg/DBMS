서브쿼리  (메인쿼리에 사용될 값을 반환해주는 쿼리문)
  예) select ename, salary from employee where salary > (select salary from employee where ename = 
'SCOTT');  = scott 사원보다 급여를 많이 받는 사원.  // 두 개의 쿼리문을 결합해서 하나의 쿼리로 만듬 
바깥 쪽에 있는 쿼리문을 메인쿼리라고 한다.  (  ) 안에 있는 쿼리문을 서브쿼리라고한다.

단일행 서브쿼리 - 값이 하나인 서브쿼리 
  where절에 사용하는 연산자가 ( =  > >= < <= <>) 종류로 나온다.
   예) 위에 예시, select ename, job, salary from employee where salary = (select min(salary) from employee);
   = 최소급여를 받는 사원의 이름, 업무, 급여를 출려하는 쿼리문.
   select dno, min(salary) from employee group by dno having min(salary) > (select min(salary) from 
employee where dno = 30);  = 30번 부서의 최소 급여보다 최소 급여가 큰 부서
  select job, round(avg(salary),1) from employee group by job having round(avg(salary),1) = (select 
min(round(avg(salary),1)) from employee group by job); 
  = 직급별 평균급여(소수점 한자리)가 가장 작은 직급과 그 직급의 평균 급여

다중행 서브쿼리 - 값이 두 개 이상인 서브쿼리
 where절에 사용하는 연산가자 (ANY, ALL, IN) 종류로 나온다.
 IN - 서브쿼리의 결과값이 하나라도 일치하면 반환해준다.
  예) select eno, ename from employee where salary in (select min(salary) from employee group by dno);
  = 부서별 최소급여를 받는 사원의 사원번호와 이름  // 그룹별 최소급여와 급여가 같은 사원번호,이름
ANY - 그중 하나라도 ~~ 한것
 < any : 최대값보다 작다     > any : 최소값보다 크다     = any : in과 동일하여 in을 쓰는게 더 낫다.
  예) select eno, ename, job, salary from employee where salary < any (select salary from employee where 
job = 'SALESMAN') and job <>'SALESMAN';  = 업무가 세일즈맨이 아니면서 급여가 세일즈맨의 최대값보다 
낮은 사원  // 업무가 세일즈맨인 사원의 최대값보다 급여가 작고, 업무가 세일즈맨과 같이 않은 것
ALL - 전체값보다 ~~한것
 < all : 최소값보다 작다    > all : 최대값보다 크다
  예) select eno, ename, job, salary from employee where salary < all (select salary from employee where job 
= 'SALESMAN') and job <>'SALESMAN';  = 업무가 세일즈맨이 아니면서 급여가 세일즈맨인 사원 보다 낮은 
사원  // 업무가 세일즈맨인 사원들의 급여보다 작고, 업무가 세일즈맨과 같이 않은 것

서브쿼리를 이용해서 join을 사용하지 않고도 할 수 있다.
예) join - select ename, e.dno, job from employee e join department d on e.dno = d.dno where d.loc = 
'DALLAS';
 서브쿼리-  select ename, dno, job from employee where dno = (select dno from department where loc = 
'DALLAS'); 로 같은 결과값이 나온다.

데이터타입 -
문자데이터 타입 - 
 char(크기) - 고정길이(최대2000byte) 예) char(10)에 abc를 넣어도 계속 10자리를 차지한다.   
 varchar2(크기) - 가변길이(최대4000byte) 예) varchar2(10)에 abc를 넣으면 3자리만 차지한다.
숫자데이터 타입 - 
 number(크기,소수자리수) 가변길이      // 소수자리수를 명시하지 않으면 소수자리가 없는 것.
   예) number(4)는 소수자리가 없는 숫자  123.23을 집어 넣어도 123만 나온다.
      number(3,2) - 전체 3자리중에 소수2자리  125.23을 넣으면 전체가 5자리기에 오류가 나온다.
      따라서 number(5,2)에 125.23을 넣어야 125.23이 잘 출력된다. 
      혹은, number(7,1)에 125.23을 넣으면 125.2만 출력되고 뒤에 소수점은 반올림되서 소수 한자리만.
날짜데이터 타입 -
 date - 따로 크기는 없다.
LOB데이터 타입 -
  CLOB - 문자형 대용량 객체(4GB-1) 
  BLOB - 이진형 대용량 - 그래픽, 동영상 등등

CRUD 중요

CREATE - 
1. create table 테이블명(컬럼명 타입, 컬럼명 타입,.....);  //새로운 테이블 생성
  예) create table producttbl(p_code varchar2(10), amount number(4), price number(8), maker varchar2(10), 
etc varchar2(20));   
2. 다른 테이블의 구조와 데이터를 전부 복사해서 만들 수 있다. 
     create table 복제테이블명 as select * from 복제할테이블명;   //복제 테이블 생성
  예) create table dept_second as select * from department;  =
    dept_second 테이블을 만든다. department테이블에 구조와 데이터를 복사해서.
3. 혹은, 특정데이터 값만 추출해서 테이블 생성도 가능하다.  
  예) create table dept20_emp as select eno, ename, salary*12 annsal from employee where dno = 20;  =
   dep20_emp 테이블을 만든다. employee테이블에 dno가 20인 레코드에 eno,ename, salary*12한 값을
  단, 기존 테이블의 일부 컬럼과 데이터를 추출해서 만들 순 있지만 추출한 데이터를 만들어서 연산식을 
이용해서 복제테이블을 만들때는 별칭을 꼭 넣어줘야한다.
4. 컬럼의 구조만 복제도 가능하다. 
    예) create table dept_third as select dno, dname from department where 0 = 1; 
   = dept_third 테이블을 만든다. department의 dno와 dname을 조건을 거짓조건으로 줘서 데이터는 가져
오지 않고 department의 dno와 dname의 컬럼 구조만 복제하는 것.
ALTER - 테이블 구조 변경
1. ADD - alter table 변경할테이블명 add(추가할 컬럼명 타입 // 컬럼 추가 (맨 마지막에 추가된다)
  예) alter table producttbl add(pname varchar(16));
2. MODIFY - alter table 변경할테이블명 modify 변경할컬럼명 타입 // 타입(크기)변경 (크기가 같거나 클때만 
변경가능하다.)
  예) alter table dept20_emp modify ename varchar2(20);
 3. 컬럼삭제 
   drop column = 완전 삭제 - 자료가 많이면 삭제되는데 시간이 걸린다.
   set unused  =  존재는 하지만 삭제된것처럼 한다.(복구는 안된다) // 삭제할 시간이 없을 때.
   drop unused = set unused를 한 후 시간적 여유가 있을 때 용량을 위해 완전 삭제를 해줘야 한다.
    alter table 변경할테이블명 drop column 삭제할컬럼명; 
    예) alter table dept20_emp drop column ename;
    alter table 변경할테이블명 set unused (삭제할컬럼명);
    alter table 변경할테이블명 drop unused colums;   
    예) alter table dept20_emp set unused (eno); -> alter table dept20_emp drop unused columns;
RENAME - rename 변경할테이블명 to 새로운테이블명 // 테이블 이름변경
    예) rename dept20_emp to emp20;           
INSERT - insert into 테이블명(컬럼명,컬럼명,....) values(값,값,....);  //레코드 생성
       단, 테이블 만든 컬럼 순서대로 모든 컬럼에 값을 넣을 거라면 컬럼명은 생략가능
   예) insert into producttbl values('SS1545', 20, 2500000, '삼성', '850리터', '냉장고');
    insert into producttbl (p_code, pname, amount, price, maker) values ('LG7484', '청소기', 7, 920000, '엘지');
DROP - drop table 삭제할테이블명; // 테이블 삭제
   예) drop table emp20;
TRUNCATE - truncate table 테이블명 // 테이블 자료 비우기 (데이터만 전부 삭제, 컬럼은 유지)
   예) truncate table dept_second;

데이터 사전 : 사용자와 데이터베이스 자원을 효율적으로 관리하기 위한 다양한 정보를 저장하는 시스템 테
이블의 집합 
  USER_ : 자신의 계정에 소유한 객체 등의 관한 정보를 조회
    예) select table_name from user_tables;  = 사용자가 만든 테이블 정보 (테이블이름)
  ALL_ : 자신의 계정 소유 또는 권한 부여 받은 객체 등의 관한 정보 조회
    예) select owner, table_name from all_tables;  = 모든 객체의 정보 (소유주, 테이블이름)
  DBA_ : 데이터베이스 관리자만 접근 가능한 객체 등의 정보 조회