컬럼명 in(조건,조건,,,); 와 컬럼명 = 조건 or 컬럼명 = 조건 or,,, 과 같음 // not in도 가능
예) select * from employee where commission in(300,500,1400); = 커미션이 300,500,1400인 것

와일드카드(%) - 컬럼명 like '찾을값%‘           
찾을값으로 시작하는 모든 것을 찾는다 단, 반드시 = 대신 LIKE를 사용해야한다.
예) select * from 테이블명 where ename like '박%‘; = ename컬럼에 박으로 시작하는 모든 것
컬럼명 like '%찾을값%‘ - 찾을값을 포함하는 모든 것을 찾는다
예) select * from 테이블명 where ename like '%박%‘; = ename컬럼에 박을 포함하는 모든 것
%박 - 박으로 끝나는 모든 것
와일드카드( _ ) - %와같지만 _는 _하나당 반드시 한 문자만 와야한다 //2개쓰면 2문자
예) select * from 테이블명 where ename like '박__‘; = ename컬럼에 박으로 시작하고 뒤에 2문자가 오는 것
_와%를 같이 사용할 수 있다.
_박% - 2번째 글자가 박으로 시작하는 모든 것, %박_ - 뒤에서 2번째 글자가 박인 모든 것
not을 붙여서 포함이 안된 것을 찾을 때 사용하기도 한다.

null 값 비교 - null값은 비어있는 값이라 = 로 비교 할 수 없고 = 대신 is를 사용해야함
예) select * from employee where commission is null; = commission이 없는 모든 것

데이터베이스는 입력한 순서대로 출력된다. 
order by 절 : 정렬  // 오름차순으로 정렬 하고 싶다면 asc = 생략가능 -  order by 컬럼명; = 오름차순
order by 컬럼명 순서방법(asc : 오름차순, desc : 내림차순)
예) select * from employee order by ename asc;  = ename을 오름차순으로 정렬해서 출력
여러개의 정렬도 가능하다. // 앞에 적은 것부터 정렬하기 때문에 코드 순서를 유의해야한다.
예) order by age desc, kor desc; = 나이로 내림차순 하고 나이가 같은 사람은 국어점수로 내림차 정렬
날짜 정렬 - 예) select * from employee order by hiredate asc; = 입사 날 순으로 오름차순


                SQL문            SQLPLUS명령어 
                여러줄       |        한줄
                ;종결        |        ;불필요
           키워드단축불가    |      키워드단축가능

SQLPLUS 명령어 -
LIST : 버퍼(임시기억장소)에  저장된 내용을 출력 (L만써도 가능)
  //  L을 입력하면 직전에 입력한 명령문이 나온다.
/ : SQL문을 보여주지 않고 바로 실행
 // /를 입력하면 방금 직전에 입력한 명령을 다시 실행한다.
RUN : LIST + / 즉, 버퍼에 저장된 SQL문을 보여주고 실행 (R만써도 가능)
host : sql을 잠시 빠져나감 -> 후에 exit : 다시 계정 접속
EDIT : 버퍼에 저장된 쿼리문을 메모장으로 불러온다. (ED만써도 가능) 메모장엔 ;대신 /로 바뀜.
SAVE : 쿼리문을 파일에 저장할 때 사용하는 명령어 (SAV만써도 가능)
 save에는 옵션(aqqend - 추가, replace - 대체) 가 있다.
 사용법) save 저장할파일명 (확장자 = sql)       // ed 저장한파일명 -> 저장한 파일을 메모장으로 불러옴
  save 저장한파일명 append - 저장한파일에 버퍼에 저장된 내용을 추가
  save 저장한파일명 replace - 저장한파일에 버퍼에 저장된 내용을 덮어씌움.
@파일이름 : sql파일에 저장된 쿼리문을 일괄적으로 실행시키는 명령
SPOOL : sql문과 실행된 쿼리 결과를 파일로 기록하는 명령어 
 사용법) spool 기록할파일명 (확장자 = lst ) 엔터 후에 작성한게 off하기 전까지 sql문과 결과가 기록된다.
SPOOL OFF : spool로 기록한후 반드시 spool을 해제시켜줘야한다. // ed 기록한파일명.lst (확장자 써야함)
예) spool test -> select * from ~~ -> sql문 ~~~~ -> spool off  = lst확장자로 sql문과 결과가 다 기록된
다.
COLUMN : 컬럼데이터에 대한 출력형식을 다양하게 지정
  사용법 - column 적용할컬럼명 format 명령어
 An : 문자형식의 출력 크기 지정 예) A20 (20글자)
  예) column job format a30 = job의 문자 출력 크기를 30으로 지정한다
 9 : 숫자형식의 길이를 조정        //형식보다 숫자의 자릿수가 작으면 작은대로 적용
  예) column commission format 9,999,999 = 만약 숫자가 1400 = 1,400  160000 = 160,000
 0 : 숫자형식의 숫자 앞에 0을 추가 //형식보다 숫자의 자릿수가 작으면 작은만큰 0추가
  예) column salary format 0,000,000 = 만약 숫자가 15000 = 0,015,000  1500000 = 1,500,000
 $ : 숫자 앞에 달러 기호 삽입 
 , : 1000단위 구분 기호

SQL에 활용하는 다양한 함수
UPPER : 대문자로 변환 , LOWER : 소문자로 변환 
INITCAP : 첫글자만 대문자, 나머지는 소문자로
 사용법 - 명령어(‘바꿀단어’ or 바꿀 컬럼명)
 예) select ename, lower(ename), job, initcap(job) from employee;  = 
    원래 ename ,소문자 ename, 원래 job, 첫글자만 대문자인 job 출력
  명령어 = 대소문자 구분 x지만 데이터는 대소문자를 구분해야만 한다. 수많은 영문 데이터의 대소문자가
  무엇으로 되어있는지 확인이 어렵기에 
  예)  select eno, ename, job from employee where lower(ename) = 'scott'; 
       이런 식으로 대,소문자를 바꾸면 쉽게 찾거나 비교 할 수 있다.
 LENGTH : 문자의 길이를 반환,  LENGTHB : 문자의 길이를 반환(바이트수)